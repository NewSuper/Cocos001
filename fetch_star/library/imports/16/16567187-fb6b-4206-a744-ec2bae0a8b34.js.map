{"version":3,"sources":["assets\\scripts\\Star.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAEM,IAAA,KAAsB,EAAE,CAAC,UAAU,EAAlC,OAAO,aAAA,EAAE,QAAQ,cAAiB,CAAC;AAG1C;IAAkC,wBAAY;IAA9C;QAAA,qEAgDC;QA7CG,gBAAU,GAAQ,CAAC,CAAA;QAEnB,UAAI,GAAa,IAAI,CAAC;;IA2C1B,CAAC;IAzCG,oBAAK,GAAL,UAAM,IAAgB;QAClB,IAAI,CAAC,IAAI,GAAC,IAAI,CAAC;QACf,IAAI,CAAC,OAAO,GAAC,IAAI,CAAC;QAClB,IAAI,CAAC,IAAI,CAAC,OAAO,GAAC,GAAG,CAAC;IAC1B,CAAC;IAED,gCAAiB,GAAjB;QACI,qBAAqB;QACrB,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;QAC1C,iBAAiB;QACjB,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC;QACnD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,uBAAQ,GAAR;QACI,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC7B,kBAAkB;QAClB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACzB,aAAa;QACb,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAED,eAAe;IAEf,oBAAK,GAAL;IAEA,CAAC;IAED,qBAAM,GAAN,UAAQ,EAAE;QACN,uBAAuB;QACvB,IAAI,IAAI,CAAC,iBAAiB,EAAE,GAAG,IAAI,CAAC,UAAU,EAAE;YAC5C,SAAS;YACT,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,OAAO;SACV;QAED,0BAA0B;QAC1B,IAAI,YAAY,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;QAC9D,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC,CAAC;IACnF,CAAC;IA5CD;QADC,QAAQ;4CACU;IAHF,IAAI;QADxB,OAAO;OACa,IAAI,CAgDxB;IAAD,WAAC;CAhDD,AAgDC,CAhDiC,EAAE,CAAC,SAAS,GAgD7C;kBAhDoB,IAAI","file":"","sourceRoot":"/","sourcesContent":["import GameManager from \"./Game\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Star extends cc.Component {\n\n    @property\n    pickRadius:number=0\n\n    game:GameManager=null;\n\n    reuse(game:GameManager){\n        this.game=game;\n        this.enabled=true;\n        this.node.opacity=255;\n    }\n\n    getPlayerDistance () {\n        // 根据 player 节点位置判断距离\n        let playerPos = this.game.player.position;\n        // 根据两点位置计算两点之间距离\n        let dist = this.node.position.sub(playerPos).mag();\n        return dist;\n    }\n\n    onPicked(){\n        let pos = this.node.position;\n        // 调用 Game 脚本的得分方法\n        this.game.gainScore(pos);\n        // 然后销毁当前星星节点\n        this.game.despawnStar(this.node);\n    }\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    update (dt) {\n        // 每帧判断和主角之间的距离是否小于收集距离\n        if (this.getPlayerDistance() < this.pickRadius) {\n            // 调用收集行为\n            this.onPicked();\n            return;\n        }\n        \n        // 根据 Game 脚本中的计时器更新星星的透明度\n        let opacityRatio = 1 - this.game.timer/this.game.starDuration;\n        let minOpacity = 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    }\n}\n"]}